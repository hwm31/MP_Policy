import 'package:flutter/material.dart';
import '../models/post.dart';
import '../widgets/post_card.dart';
import '../services/firebase_service.dart';
import '../services/auth_service.dart';
import 'create_post_screen.dart';
import 'post_detail_screen.dart';
import 'my_posts_screen.dart';

class CommunityScreen extends StatefulWidget {
  @override
  _CommunityScreenState createState() => _CommunityScreenState();
}

class _CommunityScreenState extends State<CommunityScreen> {
  String _selectedCategory = 'Ï†ÑÏ≤¥';

  final List<String> categories = ['Ï†ÑÏ≤¥', 'ÏßàÎ¨∏', 'Ï†ïÎ≥¥', 'ÌõÑÍ∏∞'];

  @override
  void initState() {
    super.initState();
    // Ïï± ÏãúÏûë Ïãú Ìïú Î≤àÎßå ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
    FirebaseService.addInitialData();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Row(
          children: [
            Text(
              'Ï≤≠ÎÖÑ ÏùºÏûêÎ¶¨ Ïª§ÎÆ§ÎãàÌã∞',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
            ),
            SizedBox(width: 8),
            Text('üê∞', style: TextStyle(fontSize: 24)),
          ],
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        centerTitle: false,
        actions: [
          // ÎîîÎ≤ÑÍπÖÏö© ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ Î≤ÑÌäº (ÏûÑÏãú)
          IconButton(
            onPressed: () {
              _showUserDebugInfo();
            },
            icon: Icon(Icons.bug_report, color: Colors.purple),
            tooltip: 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏',
          ),
          // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌëúÏãú
          if (AuthService.isLoggedIn)
            Container(
              margin: EdgeInsets.only(right: 8),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // ÏÇ¨Ïö©ÏûêÎ™Ö ÌëúÏãú
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.green.shade100,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      AuthService.currentUserName.isEmpty
                          ? 'ÏùµÎ™Ö'
                          : AuthService.currentUserName,
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.green.shade700,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  // ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï Î≤ÑÌäº (displayNameÏù¥ ÏóÜÎäî Í≤ΩÏö∞)
                  if (AuthService.currentUserName.isEmpty ||
                      AuthService.currentUserName.startsWith('user_'))
                    IconButton(
                      onPressed: () {
                        _showProfileSetupDialog();
                      },
                      icon: Icon(Icons.edit, size: 16, color: Colors.orange),
                      tooltip: 'Ïù¥Î¶Ñ ÏÑ§Ï†ï',
                    ),
                ],
              ),
            ),
          // ÎÇ¥Í∞Ä Ïì¥ Í∏Ä Î≥¥Í∏∞ Î≤ÑÌäº
          IconButton(
            onPressed: () {
              if (!AuthService.isLoggedIn) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.'),
                    backgroundColor: Colors.red,
                  ),
                );
                return;
              }

              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => MyPostsScreen(),
                ),
              );
            },
            icon: Icon(Icons.person, color: Colors.green.shade700),
            tooltip: 'ÎÇ¥Í∞Ä Ïì¥ Í∏Ä',
          ),
          // Î©îÎâ¥ Î≤ÑÌäº
          PopupMenuButton<String>(
            onSelected: (value) {
              if (value == 'my_posts') {
                if (!AuthService.isLoggedIn) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.'),
                      backgroundColor: Colors.red,
                    ),
                  );
                  return;
                }

                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => MyPostsScreen(),
                  ),
                );
              } else if (value == 'logout') {
                _handleLogout();
              } else if (value == 'profile') {
                _showProfileSetupDialog();
              }
            },
            itemBuilder: (BuildContext context) => [
              if (AuthService.isLoggedIn) ...[
                PopupMenuItem<String>(
                  value: 'my_posts',
                  child: Row(
                    children: [
                      Icon(Icons.article, color: Colors.green, size: 20),
                      SizedBox(width: 8),
                      Text('ÎÇ¥Í∞Ä Ïì¥ Í∏Ä'),
                    ],
                  ),
                ),
                PopupMenuItem<String>(
                  value: 'profile',
                  child: Row(
                    children: [
                      Icon(Icons.edit, color: Colors.blue, size: 20),
                      SizedBox(width: 8),
                      Text('Ïù¥Î¶Ñ Î≥ÄÍ≤Ω'),
                    ],
                  ),
                ),
                PopupMenuItem<String>(
                  value: 'logout',
                  child: Row(
                    children: [
                      Icon(Icons.logout, color: Colors.red, size: 20),
                      SizedBox(width: 8),
                      Text('Î°úÍ∑∏ÏïÑÏõÉ'),
                    ],
                  ),
                ),
              ],
            ],
            icon: Icon(Icons.more_vert, color: Colors.black),
          ),
        ],
      ),
      body: Column(
        children: [
          // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÉ≠
          Container(
            height: 50,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: categories.length,
              itemBuilder: (context, index) {
                final category = categories[index];
                final isSelected = category == _selectedCategory;

                return GestureDetector(
                  onTap: () {
                    setState(() {
                      _selectedCategory = category;
                    });
                  },
                  child: Container(
                    margin: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: isSelected ? Colors.green.shade100 : Colors.transparent,
                      borderRadius: BorderRadius.circular(20),
                      border: Border.all(
                        color: isSelected ? Colors.green : Colors.grey.shade300,
                      ),
                    ),
                    child: Text(
                      category,
                      style: TextStyle(
                        color: isSelected ? Colors.green : Colors.grey.shade600,
                        fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ),
                );
              },
            ),
          ),

          // FirebaseÏóêÏÑú Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í≤åÏãúÍ∏Ä Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
          Expanded(
            child: StreamBuilder<List<Post>>(
              stream: FirebaseService.getPostsStream(
                category: _selectedCategory == 'Ï†ÑÏ≤¥' ? null : _selectedCategory,
              ),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.error_outline, size: 64, color: Colors.red),
                        SizedBox(height: 16),
                        Text(
                          'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
                          style: TextStyle(fontSize: 16, color: Colors.red),
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Firebase Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),
                      ],
                    ),
                  );
                }

                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        CircularProgressIndicator(color: Colors.green),
                        SizedBox(height: 16),
                        Text(
                          'Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...',
                          style: TextStyle(color: Colors.grey.shade600),
                        ),
                      ],
                    ),
                  );
                }

                final posts = snapshot.data ?? [];

                if (posts.isEmpty) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.article_outlined, size: 64, color: Colors.grey),
                        SizedBox(height: 16),
                        Text(
                          _selectedCategory == 'Ï†ÑÏ≤¥'
                              ? 'ÏïÑÏßÅ ÏûëÏÑ±Îêú Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.'
                              : '${_selectedCategory} Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.',
                          style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Ï≤´ Î≤àÏß∏ Í∏ÄÏùÑ ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî!',
                          style: TextStyle(fontSize: 14, color: Colors.grey.shade500),
                        ),
                      ],
                    ),
                  );
                }

                return Column(
                  children: [
                    // ÌïÑÌÑ∞ Í≤∞Í≥º ÌëúÏãú
                    if (_selectedCategory != 'Ï†ÑÏ≤¥')
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                        child: Row(
                          children: [
                            Text(
                              '${_selectedCategory} Ïπ¥ÌÖåÍ≥†Î¶¨',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            SizedBox(width: 8),
                            Text(
                              'Ï¥ù ${posts.length}Í∞ú',
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                                color: Colors.green,
                              ),
                            ),
                          ],
                        ),
                      ),

                    // Í≤åÏãúÍ∏Ä Î™©Î°ù
                    Expanded(
                      child: ListView.builder(
                        itemCount: posts.length,
                        itemBuilder: (context, index) {
                          final post = posts[index];
                          return GestureDetector(
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => PostDetailScreen(post: post),
                                ),
                              );
                            },
                            child: PostCard(post: post),
                          );
                        },
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        ],
      ),

      // ÏÉà Í∏Ä ÏûëÏÑ± Î≤ÑÌäº
      floatingActionButton: Container(
        width: 120,
        child: FloatingActionButton.extended(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => CreatePostScreen(),
              ),
            ).then((result) {
              if (result == true) {
                // Í∏Ä ÏûëÏÑ± ÏÑ±Í≥µ Ïãú Ïä§ÎÇµÎ∞î ÌëúÏãú
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Í≤åÏãúÍ∏ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏûëÏÑ±ÎêòÏóàÏäµÎãàÎã§!'),
                    backgroundColor: Colors.green,
                  ),
                );
              }
            });
          },
          label: Text('ÏÉà Í∏Ä ÏûëÏÑ±ÌïòÍ∏∞'),
          icon: Icon(Icons.edit),
          backgroundColor: Colors.green.shade100,
          foregroundColor: Colors.green.shade700,
        ),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }

  // ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï Îã§Ïù¥ÏñºÎ°úÍ∑∏
  void _showProfileSetupDialog() {
    final _nameController = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Ïù¥Î¶Ñ ÏÑ§Ï†ï'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Ïª§ÎÆ§ÎãàÌã∞ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïù¥Î¶ÑÏùÑ ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.'),
              SizedBox(height: 16),
              TextField(
                controller: _nameController,
                decoration: InputDecoration(
                  hintText: 'Ïù¥Î¶Ñ (Ïòà: ÌôçÍ∏∏Îèô)',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('Ï∑®ÏÜå'),
            ),
            TextButton(
              onPressed: () async {
                String name = _nameController.text.trim();
                if (name.isNotEmpty) {
                  bool success = await AuthService.updateProfile(displayName: name);
                  if (success) {
                    Navigator.of(context).pop();
                    setState(() {}); // UI ÏÉàÎ°úÍ≥†Ïπ®
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Ïù¥Î¶ÑÏù¥ ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§: $name'),
                        backgroundColor: Colors.green,
                      ),
                    );
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Ïù¥Î¶Ñ ÏÑ§Ï†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'),
                        backgroundColor: Colors.red,
                      ),
                    );
                  }
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.'),
                      backgroundColor: Colors.orange,
                    ),
                  );
                }
              },
              child: Text('Ï†ÄÏû•'),
            ),
          ],
        );
      },
    );
  }

  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÎîîÎ≤ÑÍπÖ Îã§Ïù¥ÏñºÎ°úÍ∑∏
  void _showUserDebugInfo() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text('Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú: ${AuthService.isLoggedIn}'),
                SizedBox(height: 8),
                Text('ÏÇ¨Ïö©Ïûê ID: ${AuthService.currentUserId}'),
                SizedBox(height: 8),
                Text('ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ: "${AuthService.currentUserName}"'),
                SizedBox(height: 8),
                Text('Ïù¥Î©îÏùº: ${AuthService.currentUser?.email ?? "ÏóÜÏùå"}'),
                SizedBox(height: 8),
                Text('DisplayName: "${AuthService.currentUser?.displayName ?? "ÏóÜÏùå"}"'),
                SizedBox(height: 16),
                Text('FirebaseÏùò Í≤åÏãúÍ∏Ä ÏûëÏÑ±Ïûê: "Ïù¥Î™Ö"'),
                SizedBox(height: 8),
                Text('ÏùºÏπò Ïó¨Î∂Ä: ${AuthService.currentUserName == "Ïù¥Î™Ö" ? "ÏùºÏπò" : "Î∂àÏùºÏπò"}'),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('ÌôïÏù∏'),
            ),
            // Í∞ïÏ†úÎ°ú Ïù¥Î¶ÑÏùÑ "Ïù¥Î™Ö"ÏúºÎ°ú ÏÑ§Ï†ïÌïòÎäî Î≤ÑÌäº
            TextButton(
              onPressed: () async {
                bool success = await AuthService.updateProfile(displayName: "Ïù¥Î™Ö");
                if (success) {
                  Navigator.of(context).pop();
                  setState(() {});
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Ïù¥Î¶ÑÏùÑ "Ïù¥Î™Ö"ÏúºÎ°ú ÏÑ§Ï†ïÌñàÏäµÎãàÎã§'),
                      backgroundColor: Colors.green,
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Ïù¥Î¶Ñ ÏÑ§Ï†ï Ïã§Ìå®'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              },
              child: Text('Ïù¥Î¶ÑÏùÑ "Ïù¥Î™Ö"ÏúºÎ°ú ÏÑ§Ï†ï'),
            ),
          ],
        );
      },
    );
  }

  // Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
  void _handleLogout() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Î°úÍ∑∏ÏïÑÏõÉ'),
          content: Text('Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('Ï∑®ÏÜå'),
            ),
            TextButton(
              onPressed: () async {
                bool success = await AuthService.signOut();
                Navigator.of(context).pop();
                if (success) {
                  setState(() {}); // UI ÏÉàÎ°úÍ≥†Ïπ®
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§.'),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              },
              child: Text('Î°úÍ∑∏ÏïÑÏõÉ', style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }
}